

* Ideas

** TODO Accept list of predicates

Allow users to specify arbitrary predicates to run on buffers.

** MAYBE Projectile integration

=projectile-project-buffer-p= should probably work, so a keyword arg could specify the root directory (although, is that any different than the filename arg?)

* Other packages

** =window-purpose=

I'm not sure if this is helpful or confusing, haha:

#+BEGIN_EXAMPLE
  ---------------------------------------------------------------------
  Full information can be found on GitHub:
  https://github.com/bmag/emacs-purpose/wiki
  ---------------------------------------------------------------------

  Purpose is a package that introduces the concept of a "purpose" for
  windows and buffers, and then helps you maintain a robust window
  layout easily.

  Installation and Setup:
  Install Purpose from MELPA, or download it manually from GitHub. If
  you download manually, add these lines to your init file:
     (add-to-list 'load-path "/path/to/purpose")
     (require 'window-purpose)
  To activate Purpose at start-up, add this line to your init file:
     (purpose-mode)

  Purpose Configuration:
  Customize `purpose-user-mode-purposes', `purpose-user-name-purposes',
  `purpose-user-regexp-purposes' and
  `purpose-use-default-configuration'.

  Basic Usage:
  1. Load/Save window/frame layout (see `purpose-load-window-layout',
     `purpose-save-window-layout', etc.)
  2. Use regular switch-buffer functions - they will not mess your
     window layout (Purpose overrides them).
  3. If you don't want a window's purpose/buffer to change, dedicate
     the window:
     C-c , d: `purpose-toggle-window-purpose-dedicated'
     C-c , D: `purpose-toggle-window-buffer-dedicated'
  4. To use a switch-buffer function that ignores Purpose, prefix it
     with C-u. For example, [C-u C-x b] calls
     `switch-buffer-without-purpose'.
#+END_EXAMPLE

Maybe I could use it to help maintain the sidebar buffers...

* Testing code

#+BEGIN_SRC elisp
  (frame-purpose-make-frame :modes '(matrix-client-mode)
                            :title "Matrix"
                            :icon-type (expand-file-name "~/src/emacs/matrix-client-legacy-el/logo.png")
                            :sidebar 'right)

  (frame-purpose-make-frame :modes '(matrix-client-mode)
                            :title "Matrix"
                            :icon-type (expand-file-name "~/src/emacs/matrix-client-legacy-el/logo.png")
                            :sidebar 'above)

  (frame-purpose-make-frame :modes '(emacs-lisp-mode)
                            :title "elisp"
                            :icon-type (expand-file-name "~/src/emacs/matrix-client-legacy-el/logo.png"))

  (frame-purpose-make-frame :modes '(org-mode)
                            :title "Org"
                            :icon-type "/home/me/src/emacs/firefox-org-capture/data/org-mode.png")

  (frame-purpose-make-frame :filenames "^/home/me/src/emacs/matrix-client"
                            :title "matrix-client"
                            :icon-type (expand-file-name "~/src/emacs/matrix-client-legacy-el/logo.png"))

  (frame-purpose-make-frame :filenames (list (rx bos "/home/me/src/emacs/matrix-client"))
                            :title "matrix-client"
                            :icon-type (expand-file-name "~/src/emacs/matrix-client-legacy-el/logo.png"))
#+END_SRC
